// Code generated by "stringer -type=OpCode"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OP_CONSTANT-0]
	_ = x[OP_NIL-1]
	_ = x[OP_TRUE-2]
	_ = x[OP_FALSE-3]
	_ = x[OP_POP-4]
	_ = x[OP_DEFINE_GLOBAL-5]
	_ = x[OP_GET_GLOBAL-6]
	_ = x[OP_SET_GLOBAL-7]
	_ = x[OP_GET_LOCAL-8]
	_ = x[OP_SET_LOCAL-9]
	_ = x[OP_GET_UPVALUE-10]
	_ = x[OP_SET_UPVALUE-11]
	_ = x[OP_GET_PROPERTY-12]
	_ = x[OP_SET_PROPERTY-13]
	_ = x[OP_GET_INDEX-14]
	_ = x[OP_SET_INDEX-15]
	_ = x[OP_GET_SUPER-16]
	_ = x[OP_SLICE-17]
	_ = x[OP_EQUAL-18]
	_ = x[OP_NOT_EQUAL-19]
	_ = x[OP_GREATER-20]
	_ = x[OP_LESS-21]
	_ = x[OP_GREATER_EQUAL-22]
	_ = x[OP_LESS_EQUAL-23]
	_ = x[OP_ADD-24]
	_ = x[OP_SUBTRACT-25]
	_ = x[OP_MULTIPLY-26]
	_ = x[OP_DIVIDE-27]
	_ = x[OP_NOT-28]
	_ = x[OP_NEGATE-29]
	_ = x[OP_ARRAY-30]
	_ = x[OP_HASH-31]
	_ = x[OP_PRINT-32]
	_ = x[OP_JUMP-33]
	_ = x[OP_JUMP_IF_FALSE-34]
	_ = x[OP_LOOP-35]
	_ = x[OP_CALL-36]
	_ = x[OP_CLOSURE-37]
	_ = x[OP_CLOSE_UPVALUE-38]
	_ = x[OP_CLASS-39]
	_ = x[OP_INHERIT-40]
	_ = x[OP_METHOD-41]
	_ = x[OP_INVOKE-42]
	_ = x[OP_SUPER_INVOKE-43]
	_ = x[OP_RETURN-44]
}

const _OpCode_name = "OP_CONSTANTOP_NILOP_TRUEOP_FALSEOP_POPOP_DEFINE_GLOBALOP_GET_GLOBALOP_SET_GLOBALOP_GET_LOCALOP_SET_LOCALOP_GET_UPVALUEOP_SET_UPVALUEOP_GET_PROPERTYOP_SET_PROPERTYOP_GET_INDEXOP_SET_INDEXOP_GET_SUPEROP_SLICEOP_EQUALOP_NOT_EQUALOP_GREATEROP_LESSOP_GREATER_EQUALOP_LESS_EQUALOP_ADDOP_SUBTRACTOP_MULTIPLYOP_DIVIDEOP_NOTOP_NEGATEOP_ARRAYOP_HASHOP_PRINTOP_JUMPOP_JUMP_IF_FALSEOP_LOOPOP_CALLOP_CLOSUREOP_CLOSE_UPVALUEOP_CLASSOP_INHERITOP_METHODOP_INVOKEOP_SUPER_INVOKEOP_RETURN"

var _OpCode_index = [...]uint16{0, 11, 17, 24, 32, 38, 54, 67, 80, 92, 104, 118, 132, 147, 162, 174, 186, 198, 206, 214, 226, 236, 243, 259, 272, 278, 289, 300, 309, 315, 324, 332, 339, 347, 354, 370, 377, 384, 394, 410, 418, 428, 437, 446, 461, 470}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
