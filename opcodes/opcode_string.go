// Code generated by "stringer -type=OpCode"; DO NOT EDIT.

package opcodes

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OP_CONSTANT-0]
	_ = x[OP_NIL-1]
	_ = x[OP_TRUE-2]
	_ = x[OP_FALSE-3]
	_ = x[OP_POP-4]
	_ = x[OP_DEFINE_GLOBAL-5]
	_ = x[OP_GET_GLOBAL-6]
	_ = x[OP_SET_GLOBAL-7]
	_ = x[OP_GET_LOCAL-8]
	_ = x[OP_SET_LOCAL-9]
	_ = x[OP_GET_UPVALUE-10]
	_ = x[OP_SET_UPVALUE-11]
	_ = x[OP_GET_PROPERTY-12]
	_ = x[OP_SET_PROPERTY-13]
	_ = x[OP_GET_INDEX-14]
	_ = x[OP_SET_INDEX-15]
	_ = x[OP_GET_SUPER-16]
	_ = x[OP_EQUAL-17]
	_ = x[OP_NOT_EQUAL-18]
	_ = x[OP_GREATER-19]
	_ = x[OP_LESS-20]
	_ = x[OP_GREATER_EQUAL-21]
	_ = x[OP_LESS_EQUAL-22]
	_ = x[OP_ADD-23]
	_ = x[OP_SUBTRACT-24]
	_ = x[OP_MULTIPLY-25]
	_ = x[OP_DIVIDE-26]
	_ = x[OP_NOT-27]
	_ = x[OP_NEGATE-28]
	_ = x[OP_ARRAY-29]
	_ = x[OP_HASH-30]
	_ = x[OP_PRINT-31]
	_ = x[OP_JUMP-32]
	_ = x[OP_JUMP_IF_FALSE-33]
	_ = x[OP_LOOP-34]
	_ = x[OP_CALL-35]
	_ = x[OP_CLOSURE-36]
	_ = x[OP_CLOSE_UPVALUE-37]
	_ = x[OP_CLASS-38]
	_ = x[OP_INHERIT-39]
	_ = x[OP_METHOD-40]
	_ = x[OP_INVOKE-41]
	_ = x[OP_SUPER_INVOKE-42]
	_ = x[OP_RETURN-43]
}

const _OpCode_name = "OP_CONSTANTOP_NILOP_TRUEOP_FALSEOP_POPOP_DEFINE_GLOBALOP_GET_GLOBALOP_SET_GLOBALOP_GET_LOCALOP_SET_LOCALOP_GET_UPVALUEOP_SET_UPVALUEOP_GET_PROPERTYOP_SET_PROPERTYOP_GET_INDEXOP_SET_INDEXOP_GET_SUPEROP_EQUALOP_NOT_EQUALOP_GREATEROP_LESSOP_GREATER_EQUALOP_LESS_EQUALOP_ADDOP_SUBTRACTOP_MULTIPLYOP_DIVIDEOP_NOTOP_NEGATEOP_ARRAYOP_HASHOP_PRINTOP_JUMPOP_JUMP_IF_FALSEOP_LOOPOP_CALLOP_CLOSUREOP_CLOSE_UPVALUEOP_CLASSOP_INHERITOP_METHODOP_INVOKEOP_SUPER_INVOKEOP_RETURN"

var _OpCode_index = [...]uint16{0, 11, 17, 24, 32, 38, 54, 67, 80, 92, 104, 118, 132, 147, 162, 174, 186, 198, 206, 218, 228, 235, 251, 264, 270, 281, 292, 301, 307, 316, 324, 331, 339, 346, 362, 369, 376, 386, 402, 410, 420, 429, 438, 453, 462}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
